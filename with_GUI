import sys
import csv
import os
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QLineEdit, QTextEdit, QMessageBox

class DictionaryApp(QWidget):
    def __init__(self):
        super().__init__()
        self.dictionary = self.dictionaryCreate('english.csv')
        self.trie = self.make_trie(self.dictionary)
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Dictionary Application')
        self.setGeometry(100, 100, 800, 600)

        self.word_entry = QLineEdit(self)
        self.verb_entry = QLineEdit(self)
        self.meaning_entry = QTextEdit(self)
        self.output_display = QTextEdit(self)
        
        insert_button = QPushButton('Insert', self)
        insert_button.clicked.connect(self.insertWord)

        get_button = QPushButton('Get', self)
        get_button.clicked.connect(self.getWord)

        delete_button = QPushButton('Delete', self)
        delete_button.clicked.connect(self.deleteWord)

        reset_button = QPushButton('Reset Dictionary', self)
        reset_button.clicked.connect(self.resetDictionary)

        main_layout = QVBoxLayout()
        input_layout = QHBoxLayout()
        input_layout.addWidget(QLabel('Word:'))
        input_layout.addWidget(self.word_entry)
        input_layout.addWidget(QLabel('Verb:'))
        input_layout.addWidget(self.verb_entry)
        input_layout.addWidget(QLabel('Meaning:'))
        
        main_layout.addLayout(input_layout)
        main_layout.addWidget(self.meaning_entry)
        main_layout.addWidget(insert_button)
        main_layout.addWidget(get_button)
        main_layout.addWidget(delete_button)
        main_layout.addWidget(reset_button)
        main_layout.addWidget(self.output_display)

        self.setLayout(main_layout)

    def dictionaryCreate(self, filename):
        dictionary = {}
        try:
            countX = 127338
            countY = 139824
            with open(filename) as f:
                data = f.readlines()
            for i in range(len(data)):
                if i >= countX and i <= countY:
                    data[i] = data[i].strip().split(' ')
                else:
                    #User-defined words from 188510
                    data[i] = data[i].strip().split(',')
            
            for i in range(1,len(data)):
                word = data[i].pop(0)
                word = word.upper()
                if word in dictionary:
                    dictionary[word].append(','.join(data[i]))
                else:
                    dictionary[word] = [','.join(data[i])]
        except FileNotFoundError:
            QMessageBox.critical(self, 'Error', f'Could not find {filename}. Please make sure the file exists.')
        return dictionary

    def make_trie(self, dictionary):
        trie = {}
        for word in dictionary:
            current_dict = trie
            for letter in word:
                if letter not in current_dict:
                    current_dict[letter] = {}
                current_dict = current_dict[letter]
            current_dict["_end"] = dictionary[word]
        return trie

    def insert_trie(self, trie, word, meaning, verb, dictionary):
        temp = word.strip().upper()
        current_dict = trie
        flag = True
        for letter in temp:
            if letter not in current_dict:
                flag = False
                break
            current_dict = current_dict[letter]
        toBeAppended = verb.strip() + "," + meaning.strip()
        if flag:
            if "_end" in current_dict:
                if toBeAppended not in current_dict["_end"]:
                    current_dict["_end"].append(toBeAppended)
                    self.writeToCSV(word, verb, meaning)
                    return "Meaning added successfully"
                else:
                    return "Meaning already in dictionary!"
            else:
                current_dict["_end"] = [toBeAppended]
                self.writeToCSV(word, verb, meaning)
                return "Word entered successfully"
        else:
            current_dict = trie
            for letter in temp:
                if letter not in current_dict:
                    current_dict[letter] = {}
                current_dict = current_dict[letter]
            current_dict["_end"] = [toBeAppended]
            self.writeToCSV(word, verb, meaning)
            return "Word entered successfully"

    def in_trie(self, trie, word, dictionary):
        temp = word.strip().upper()
        current_dict = trie
        for letter in temp:
            if letter not in current_dict:
                return "No such word in dictionary."
            current_dict = current_dict[letter]
        if "_end" in current_dict:
            meanings = ', '.join(current_dict["_end"])
            return f"{word}: {meanings}"
        else:
            return "No meanings found for this word in dictionary."

    def delete_trie_word(self, trie, word, dictionary):
        temp = word.strip().upper()
        current_dict = trie
        for letter in temp:
            if letter not in current_dict:
                return "No such word in dictionary."
            current_dict = current_dict[letter]
        if "_end" not in current_dict:
            return "No such word in dictionary."
        else:
            del current_dict["_end"]
            self.delete_word_from_CS(word)
            return "Word removed successfully."

    def writeToCSV(self, word, verb, meaning):
        try:
            with open("english.csv", "a", newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow([word.strip(), verb.strip(), meaning.strip()])
        except FileNotFoundError:
            QMessageBox.critical(self, 'Error', 'CSV file not found.')

    def delete_word_from_CS(self, word):
        try:
            with open("english.csv", "r", newline='', encoding='utf-8') as copyf, open("transfer.csv", "w", newline='', encoding='utf-8') as f:
                reader = csv.reader(copyf)
                writer = csv.writer(f)
                for row in reader:
                    if row[0].strip().upper() != word.strip().upper():
                        writer.writerow(row)
            os.replace("transfer.csv", "english.csv")
        except FileNotFoundError:
            QMessageBox.critical(self, 'Error', 'CSV file not found.')

    def resetDictionary(self):
        try:
            with open("original.csv", "r", newline='', encoding='utf-8') as copyf, open("english.csv", "w", newline='', encoding='utf-8') as f:
                reader = csv.reader(copyf)
                writer = csv.writer(f)
                for row in reader:
                    writer.writerow(row)
            self.dictionary = self.dictionaryCreate('english.csv')
            self.trie = self.make_trie(self.dictionary)
            QMessageBox.information(self, 'Success', 'Dictionary reset successfully.')
        except FileNotFoundError:
            QMessageBox.critical(self, 'Error', 'Original CSV file not found.')

    def getWord(self):
        word = self.word_entry.text()
        result = self.in_trie(self.trie, word, self.dictionary)
        self.output_display.setText(result)

    def insertWord(self):
        word = self.word_entry.text()
        verb = self.verb_entry.text()
        meaning = self.meaning_entry.toPlainText()
        result = self.insert_trie(self.trie, word, meaning, verb, self.dictionary)
        self.output_display.setText(result)

    def deleteWord(self):
        word = self.word_entry.text()
        result = self.delete_trie_word(self.trie, word, self.dictionary)
        self.output_display.setText(result)


def main():
    app = QApplication(sys.argv)
    window = DictionaryApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
